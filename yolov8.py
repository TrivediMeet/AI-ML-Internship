# -*- coding: utf-8 -*-
"""yolov8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BqbdUQNvRnkAqgUiPdzgkHFATmeOSId2
"""

!rm -rf /root/.cache/kagglehub/datasets/hassanmojab/xview-dataset
print("🧹 Old dataset deleted")

!pip install -q kagglehub

import kagglehub

# Download the dataset
path = kagglehub.dataset_download("hassanmojab/xview-dataset")

print("✅ Downloaded to:", path)

import os

path = "/root/.cache/kagglehub/datasets/hassanmojab/xview-dataset/versions/1"
print("📂 Contents of downloaded dataset:")
print(os.listdir(path))

pip cache purge

!pip install -q ultralytics geopandas seaborn matplotlib

import os
import json
import shutil
import yaml
import seaborn as sns
import matplotlib.pyplot as plt
from collections import Counter
from PIL import Image
from ultralytics import YOLO

# ===============================
# 📂 DATASET PATHS
# ===============================
base_path = "/root/.cache/kagglehub/datasets/hassanmojab/xview-dataset/versions/1"
train_img_dir = os.path.join(base_path, "train_images")
val_img_dir = os.path.join(base_path, "val_images")
label_file = os.path.join(base_path, "train_labels", "xView_train.geojson")

label_file = os.path.join(base_path, "train_labels", "train_labels", "xView_train.geojson")

# ===============================
# 🔠 CLASS MAPPING
# ===============================
xview_classes = {
    0: "Fixed-wing Aircraft", 1: "Small Aircraft", 2: "Cargo Plane", 3: "Helicopter",
    4: "Passenger Vehicle", 5: "Small Car", 6: "Bus", 7: "Pickup Truck",
    8: "Utility Truck", 9: "Truck", 10: "Cargo Truck", 11: "Truck w/Box",
    12: "Truck Tractor", 13: "Trailer", 14: "Truck w/Flatbed", 15: "Truck w/Liquid",
    16: "Crane Truck", 17: "Railway Vehicle", 18: "Passenger Car", 19: "Cargo Car",
    20: "Flat Car", 21: "Tank car", 22: "Locomotive", 23: "Container Ship",
    24: "Liner Ship", 25: "Fishing Vessel", 26: "Oil Tanker", 27: "Engineering Vehicle",
    28: "Tower crane", 29: "Container Crane", 30: "Reach Stacker", 31: "Straddle Carrier",
    32: "Mobile Crane", 33: "Dump Truck", 34: "Haul Truck", 35: "Scraper/Tractor",
    36: "Front Loader/Bulldozer", 37: "Excavator", 38: "Cement Mixer", 39: "Ground Grader",
    40: "Hut/Tent", 41: "Shed", 42: "Building", 43: "Aircraft Hangar", 44: "Damaged Building",
    45: "Facility", 46: "Construction Site", 47: "Vehicle Lot", 48: "Helipad",
    49: "Storage Tank", 50: "Shipping Container Lot", 51: "Shipping Container", 52: "Pylon",
    53: "Tower", 54: "Wind Turbine", 55: "Tower-like Structure", 56: "Container/Truck",
    57: "Oil Rig", 58: "Pier", 59: "Dock"
}

sorted_ids = sorted(xview_classes.keys())
typeid_to_yolo = {tid: i for i, tid in enumerate(sorted_ids)}
class_names = [xview_classes[tid] for tid in sorted_ids]

# ===============================
# 📁 OUTPUT STRUCTURE
# ===============================
os.makedirs("images/train", exist_ok=True)
os.makedirs("images/val", exist_ok=True)

os.makedirs("labels/train", exist_ok=True)
os.makedirs("labels/val", exist_ok=True)

# # Copy images
# for fname in os.listdir(train_img_dir):
#     if fname.endswith(".tif"):
#         shutil.copy(os.path.join(train_img_dir, fname), os.path.join("images/train", fname))

# for fname in os.listdir(val_img_dir):
#     if fname.endswith(".tif"):
#         shutil.copy(os.path.join(val_img_dir, fname), os.path.join("images/val", fname))

base_path = "/root/.cache/kagglehub/datasets/hassanmojab/xview-dataset/versions/1"

train_img_src = os.path.join(base_path, "train_images", "train_images")
val_img_src   = os.path.join(base_path, "val_images", "val_images")

label_file = os.path.join(base_path, "train_labels", "xView_train.geojson")

# ===============================
# 5️⃣ Convert GeoJSON to YOLO Labels
# ===============================
with open(label_file) as f:
    data = json.load(f)

created_labels = 0

for feat in data["features"]:
    props = feat["properties"]
    image_id = props.get("image_id")
    bbox = props.get("bounds_imcoords")
    type_id = props.get("type_id")

    if not image_id or not bbox or type_id not in typeid_to_yolo:
        continue

    try:
        x1, y1, x2, y2 = map(float, bbox.split(','))
    except:
        continue

    # Determine if the image is in train or val set
    if os.path.exists(os.path.join("images/train", image_id)):
        label_path = os.path.join("labels/train", os.path.splitext(image_id)[0] + ".txt")
        img_path = os.path.join("images/train", image_id)
    elif os.path.exists(os.path.join("images/val", image_id)):
        label_path = os.path.join("labels/val", os.path.splitext(image_id)[0] + ".txt")
        img_path = os.path.join("images/val", image_id)
    else:
        continue

    with Image.open(img_path) as img:
        img_w, img_h = img.size

    x_center = ((x1 + x2) / 2) / img_w
    y_center = ((y1 + y2) / 2) / img_h
    w = (x2 - x1) / img_w
    h = (y2 - y1) / img_h
    yolo_id = typeid_to_yolo[type_id]

    with open(label_path, "a") as out:
        out.write(f"{yolo_id} {x_center:.6f} {y_center:.6f} {w:.6f} {h:.6f}\n")
        created_labels += 1

print(f"✅ Created {created_labels} YOLO-format labels")

# ===============================
# 📄 CREATE data.yaml
# ===============================
data_yaml = {
    'train': 'images/train',
    'val': 'images/val',
    'nc': len(class_names),
    'names': class_names
}

with open("data.yaml", "w") as f:
    yaml.dump(data_yaml)

print("✅ data.yaml created!")

import yaml

xview_names = [
    "Fixed-wing Aircraft", "Small Aircraft", "Cargo Plane", "Helicopter", "Passenger Vehicle", "Small Car", "Bus",
    "Pickup Truck", "Utility Truck", "Truck", "Cargo Truck", "Truck w/Box", "Truck Tractor", "Trailer",
    "Truck w/Flatbed", "Truck w/Liquid", "Crane Truck", "Railway Vehicle", "Passenger Car", "Cargo Car",
    "Flat Car", "Tank car", "Locomotive", "Container Ship", "Liner Ship", "Fishing Vessel", "Oil Tanker",
    "Engineering Vehicle", "Tower crane", "Container Crane", "Reach Stacker", "Straddle Carrier", "Mobile Crane",
    "Dump Truck", "Haul Truck", "Scraper/Tractor", "Front Loader/Bulldozer", "Excavator", "Cement Mixer",
    "Ground Grader", "Hut/Tent", "Shed", "Building", "Aircraft Hangar", "Damaged Building", "Facility",
    "Construction Site", "Vehicle Lot", "Helipad", "Storage Tank", "Shipping Container Lot", "Shipping Container",
    "Pylon", "Tower", "Wind Turbine", "Tower-like Structure", "Container/Truck", "Oil Rig", "Pier", "Dock"
]

data_yaml = {
    'train': 'images/train',
    'val': 'images/val',
    'nc': 60,
    'names': xview_names
}

# Overwrite and save cleanly
with open("data.yaml", "w", encoding='utf-8') as f:
    yaml.dump(data_yaml, f, default_flow_style=False)

print("✅ data.yaml written successfully")

# Let's also double-check:
with open("data.yaml", "r") as f:
    print("\n📄 data.yaml preview:")
    print(f.read())

# ===============================
# 🧠 TRAIN YOLOv8
# ===============================
model = YOLO("yolov8m.pt")  # Use 'n', 's', 'l', or 'x' as needed

model.train(
    data="data.yaml",
    epochs=100,
    imgsz=640,
    patience=10,
    batch=16,
    workers=2,
    name="xview_yolo8",
    augment=True,
    pretrained=True,
    verbose=True
)

import os
import shutil

# Update base path if needed
base_path = "/root/.cache/kagglehub/datasets/hassanmojab/xview-dataset/versions/1"
train_img_src = os.path.join(base_path, "train_images", "train_images")
val_img_src = os.path.join(base_path, "val_images", "val_images")

train_img_dst = "images/train"
val_img_dst = "images/val"

# Copy .tif images from original dataset into YOLO folders
def copy_images(src, dst):
    copied = 0
    for file in os.listdir(src):
        if file.endswith(".tif"):
            shutil.copy(os.path.join(src, file), os.path.join(dst, file))
            copied += 1
    print(f"✅ Copied {copied} images to {dst}")

copy_images(train_img_src, train_img_dst)
copy_images(val_img_src, val_img_dst)

import os

base_path = "/root/.cache/kagglehub/datasets/hassanmojab/xview-dataset/versions/1"

print("📁 train_images:")
train_list = os.listdir(os.path.join(base_path, "train_images"))
print(train_list[:10], f"... total: {len(train_list)} files")

print("\n📁 val_images:")
val_list = os.listdir(os.path.join(base_path, "val_images"))
print(val_list[:10], f"... total: {len(val_list)} files")

import os

label_base = "/root/.cache/kagglehub/datasets/hassanmojab/xview-dataset/versions/1/train_labels"

print("📂 Listing contents of val_labels folder:")
for root, dirs, files in os.walk(label_base):
    print(f"\n📁 Directory: {root}")
    for file in files:
        print(" └──", file)

import os
val_images = os.listdir("images/val")
print("🖼️ Sample val image filenames:", val_images[:5])

import json

with open(label_file) as f:
    data = json.load(f)

geojson_image_ids = set(f["properties"]["image_id"] for f in data["features"])
missing_labels = [img for img in val_images if img not in geojson_image_ids]

print(f"🧩 {len(missing_labels)} val images are missing in the geojson.")
print("Example:", missing_labels[:5])

import os

label_base = "/root/.cache/kagglehub/datasets/hassanmojab/xview-dataset/versions/1/val_labels"

print("📂 Listing contents of val_labels folder:")
for root, dirs, files in os.walk(label_base):
    print(f"\n📁 Directory: {root}")
    for file in files:
        print(" └──", file)

import os, shutil, json, random
from PIL import Image
import yaml

# === SETUP PATHS ===
base_path = "/root/.cache/kagglehub/datasets/hassanmojab/xview-dataset/versions/1"
image_source = os.path.join(base_path, "train_images", "train_images")
geojson_path = os.path.join(base_path, "train_labels", "xView_train.geojson")

# === CLEAN FOLDERS ===
for f in ["images/train", "images/val", "labels/train", "labels/val"]:
    shutil.rmtree(f, ignore_errors=True)
    os.makedirs(f, exist_ok=True)

# === CLASS MAPPING ===
xview_classes = {
    0: "Fixed-wing Aircraft", 1: "Small Aircraft", 2: "Cargo Plane", 3: "Helicopter",
    4: "Passenger Vehicle", 5: "Small Car", 6: "Bus", 7: "Pickup Truck", 8: "Utility Truck",
    9: "Truck", 10: "Cargo Truck", 11: "Truck w/Box", 12: "Truck Tractor", 13: "Trailer",
    14: "Truck w/Flatbed", 15: "Truck w/Liquid", 16: "Crane Truck", 17: "Railway Vehicle",
    18: "Passenger Car", 19: "Cargo Car", 20: "Flat Car", 21: "Tank car", 22: "Locomotive",
    23: "Container Ship", 24: "Liner Ship", 25: "Fishing Vessel", 26: "Oil Tanker",
    27: "Engineering Vehicle", 28: "Tower crane", 29: "Container Crane", 30: "Reach Stacker",
    31: "Straddle Carrier", 32: "Mobile Crane", 33: "Dump Truck", 34: "Haul Truck",
    35: "Scraper/Tractor", 36: "Front Loader/Bulldozer", 37: "Excavator", 38: "Cement Mixer",
    39: "Ground Grader", 40: "Hut/Tent", 41: "Shed", 42: "Building", 43: "Aircraft Hangar",
    44: "Damaged Building", 45: "Facility", 46: "Construction Site", 47: "Vehicle Lot",
    48: "Helipad", 49: "Storage Tank", 50: "Shipping Container Lot", 51: "Shipping Container",
    52: "Pylon", 53: "Tower", 54: "Wind Turbine", 55: "Tower-like Structure", 56: "Container/Truck",
    57: "Oil Rig", 58: "Pier", 59: "Dock"
}
sorted_ids = sorted(xview_classes.keys())
typeid_to_yolo = {tid: i for i, tid in enumerate(sorted_ids)}

# === PARSE GEOJSON ===
with open(geojson_path) as f:
    data = json.load(f)

annotations = {}
for feat in data["features"]:
    props = feat["properties"]
    image_id = props.get("image_id")
    bbox = props.get("bounds_imcoords")
    cls = props.get("type_id")

    if not image_id or not bbox or cls not in typeid_to_yolo:
        continue

    try:
        x1, y1, x2, y2 = map(float, bbox.split(","))
    except:
        continue

    annotations.setdefault(image_id, []).append((typeid_to_yolo[cls], x1, y1, x2, y2))

# === SPLIT 80/20 ===
image_ids = list(annotations.keys())
random.shuffle(image_ids)
split = int(len(image_ids) * 0.8)
train_ids, val_ids = image_ids[:split], image_ids[split:]

# === COPY IMAGES + CONVERT LABELS ===
def process_set(image_ids, img_dst, lbl_dst):
    count = 0
    for img_name in image_ids:
        src = os.path.join(image_source, img_name)
        dst = os.path.join(img_dst, img_name)
        if not os.path.exists(src):
            continue
        try:
            with Image.open(src) as im:
                w, h = im.size
        except:
            continue
        shutil.copy(src, dst)

        label_file = os.path.splitext(img_name)[0] + ".txt"
        label_path = os.path.join(lbl_dst, label_file)

        with open(label_path, "w") as f:
            for cls, x1, y1, x2, y2 in annotations[img_name]:
                xc = ((x1 + x2) / 2) / w
                yc = ((y1 + y2) / 2) / h
                bw = (x2 - x1) / w
                bh = (y2 - y1) / h
                f.write(f"{cls} {xc:.6f} {yc:.6f} {bw:.6f} {bh:.6f}\n")
        count += 1
    return count

train_count = process_set(train_ids, "images/train", "labels/train")
val_count   = process_set(val_ids,   "images/val",   "labels/val")

print(f"✅ {train_count} training images and {val_count} validation images processed")

# === WRITE data.yaml ===
data_yaml = {
    "train": "images/train",
    "val": "images/val",
    "nc": len(xview_classes),
    "names": [xview_classes[i] for i in sorted_ids]
}
with open("data.yaml", "w") as f:
    yaml.dump(data_yaml, f)

print("✅ data.yaml written — ready to train!")

model = YOLO("yolov8m.pt")  # Use 'n', 's', 'l', or 'x' as needed

model.train(
    data="data.yaml",
    epochs=15,
    imgsz=1024,
    patience=3,
    batch=16,
    workers=2,
    name="xview_yolo8",
    augment=True,
    pretrained=True,
    verbose=True
)

model.train(
    data='data.yaml',
    epochs=100,
    imgsz=1024,
    patience=10,
    batch=8,
    workers=8,
    name='xview_yolo8_tuned',
    augment=True,
    hsv_h=0.015,
    hsv_s=0.7,
    hsv_v=0.4,
    degrees=45,
    flipud=0.5,
    mosaic=1.0,
    mixup=0.2,
    pretrained=True,
    verbose=True,
    lr0=0.001,      # initial learning rate
    lrf=0.01,       # final learning rate (as a fraction of lr0)
    optimizer='AdamW',
    cos_lr=True     # use cosine annealing schedule
)